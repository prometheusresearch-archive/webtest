#!/usr/bin/env node

var webtest;
try {
  webtest = require('../lib');
} catch(_err) {
  require('babel/register')({stage: 0});
  webtest = require('../src');
}

var nomnom = require('nomnom');
var pkg = require('../package.json');
var fs = require('fs');
var path = require('path');

var options = nomnom
  .option('config', {
    abbr: 'c',
    help: 'Webpack configuration'
  })
  .option('port', {
    abbr: 'p',
    default: 3000,
    help: 'Port'
  })
  .option('headless', {
    flag: true,
    help: 'Run in headless mode (requires PhantomJS to be installed)'
  })
  .option('discover', {
    default: '**/__tests__/*-test.js',
    help: 'Glob patter to discover tests'
  })
  .option('debug', {
    flag: true,
    help: 'Debug mode'
  })
  .option('version', {
    flag: true,
    help: 'Print version and exit'
  })
  .parse();

if (options.version) {
  console.log(pkg.version);
  process.exit(0);
}

var cwd = process.cwd();

if (options._[0]) {
  var stat = fs.statSync(options._[0]);
  if (stat.isFile()) {
    options.discover = options._[0];
    cwd = process.cwd();
  } else if (stat.isDirectory()) {
    cwd = options._[0];
  }
}

var config = null;

if (options.config) {
  if (options.config[0] !== '.' && options.config[0] !== '/') {
    options.config = './' + options.config;
  }
  config = options.config;
}

if (fs.existsSync(path.join(cwd, 'webpack.config.js'))) {
  config = path.join(cwd, 'webpack.config.js');
}

if (config) {
  config = require(path.join(cwd, config));
}

webtest.start(cwd, options, config).then(
  function() {

  },
  function(err) {
    throw err;
  });
