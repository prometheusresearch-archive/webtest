#!/usr/bin/env node

var webtest;
try {
  webtest = require('../lib');
} catch(_err) {
  require('babel/register')({stage: 0});
  webtest = require('../src');
}

var nomnom = require('nomnom');
var pkg = require('../package.json');
var fs = require('fs');
var path = require('path');

var DEFAULT_GLOB = '**/__tests__/*-test.js';

var args = nomnom
  .script('webtest')
  .option('entry', {
    list: true,
    position: 0,
    help: 'Glob patterns to discover test cases  [$PWD/' + DEFAULT_GLOB + ']'
  })
  .option('config', {
    abbr: 'c',
    help: 'Webpack configuration  [$PWD/webpack.config.js]'
  })
  .option('context', {
    help: 'Context  [$PWD]'
  })
  .option('port', {
    abbr: 'p',
    default: 3000,
    help: 'Port'
  })
  .option('headless', {
    flag: true,
    help: 'Run in headless mode (requires PhantomJS to be installed)'
  })
  .option('discover', {
    default: DEFAULT_GLOB,
    help: 'Glob patter to discover tests'
  })
  .option('debug', {
    flag: true,
    help: 'Debug mode'
  })
  .option('version', {
    flag: true,
    help: 'Print version and exit'
  })
  .parse();

if (args.version) {
  console.log(pkg.version);
  process.exit(0);
}

/**
 * Context discovery.
 */

var context = args.context || process.cwd();

/**
 * Entry points discovery
 */

var entry = args.entry.map(function(e) {
  var stat = fs.statSync(e);
  if (stat.isFile()) {
    return e;
  } else if (stat.isDirectory()) {
    return e + '/' + args.discover
  }
});

if (entry.length === 0) {
  entry = [context + '/' + args.discovery];
}

/**
 * webpack.config.js discovery
 */

var config = null;

if (args.config) {
  if (args.config[0] !== '.' && args.config[0] !== '/') {
    args.config = './' + args.config;
  }
  config = require(path.join(context, config));
} else if (fs.existsSync(path.join(context, 'webpack.config.js'))) {
  config = path.join(context, 'webpack.config.js');
  config = require(config);
}

var options = {
  port: args.port,
  headless: args.headless,
  debug: args.debug
};

webtest(context, entry, options, config).then(
  function() {

  },
  function(err) {
    throw err;
  });
